{
  "packages": [
    "cassandra_4@4.1.2",
    "nodejs@18.14.2",
    "yarn@1.22.19",
    "yq@3.2.3",
    "openssl@3.0.10",
    "docker-compose@2.21.0"
  ],
  "env": {
    "L1X_CFG_TOOLS": "kevincoutinho007/l1x-toolkit:0.8.9",
    "L1X_CFG_CHAIN_TYPE": "local_devnet",
    "L1X_CFG_WS_HOME": "$PWD",
    "L1X_CFG_DRT_ARTIFACTS": "/home/l1x/l1x-ws/l1x-artifacts",
    "L1X_CFG_EVM_ARTIFACTS": "$PWD/l1x-evm-artifacts",
    "L1X_CFG_TRACES": "$PWD/l1x-traces",
    "L1X_CFG_ARTIFACTS": "$PWD/l1x-artifacts",
    "L1X_CFG_CLI_SCRIPTS": "$PWD/l1x-conf/scripts",
    "L1X_CFG_DC_CMD_INTF": "docker-compose",
    "L1X_CFG_DC_FILE": "$PWD/devnet-services-dc.yml",
    "L1X_CFG_CASSANDRA1_DATA": "$PWD/l1x-conf/cassandra1_data",
    "L1X_CFG_CASSANDRA2_DATA": "$PWD/l1x-conf/cassandra2_data",
    "L1X_CFG_CASSANDRA_HOST": "127.0.0.1",
    "L1X_CFG_CASSANDRA_PORT": "9042"
  },
  "shell": {
    "init_hook": ["echo Welcome to l1x-ft, Happy Coding! > /dev/null"],
    "scripts": {
      "01_init_setup": [
        "echo Initializing Setup",
        "if [ ! -d $L1X_CFG_ARTIFACTS ]; then mkdir $L1X_CFG_ARTIFACTS; fi",
        "if [ ! -d $L1X_CFG_TRACES ]; then mkdir $L1X_CFG_TRACES; fi",
        "if [ ! -d $L1X_CFG_CLI_SCRIPTS/l1x-forge-cli ]; then mkdir $L1X_CFG_CLI_SCRIPTS/l1x-forge-cli; fi",
        "if [ ! -d $L1X_CFG_CASSANDRA1_DATA ]; then mkdir $L1X_CFG_CASSANDRA1_DATA; fi",
        "if [ ! -d $L1X_CFG_CASSANDRA2_DATA ]; then mkdir $L1X_CFG_CASSANDRA2_DATA; fi",
        "if [ ! -d $L1X_CFG_EVM_ARTIFACTS ]; then mkdir $L1X_CFG_EVM_ARTIFACTS; fi",
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2 && yarn install && yarn build"
      ],
      "01_start_hardhat": [
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2/pkg/pool-stable && npx hardhat node"
      ],
      "01_teardown_setup": [
        "pkill --signal 9 -f 'npm exec hardhat node' && pkill --signal 9 -f 'hardhat node'"
      ],
      "02_check_chain_state": [
        "echo '**** ‚è≥ Get L1X chain state ‚è≥ ****'",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE run --rm l1x-tools-get-chain-state",
        "echo '‚è≥ **************************************************************** ‚è≥'"
      ],
      "02_check_devnet_db_state": [
        "echo 'Get L1X chain state...'",
        "cqlsh -e 'SELECT * FROM system.local;' $L1X_CFG_CASSANDRA_HOST $L1X_CFG_CASSANDRA_PORT"
      ],
      "02_prune_devnode": [
        "echo 'Prune L1X devnode service resources...'",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE down",
        "sudo rm -Rf $L1X_CFG_CASSANDRA1_DATA/*",
        "sudo rm -Rf $L1X_CFG_CASSANDRA2_DATA/*"
      ],
      "02_start_devnode": [
        "echo 'Start L1X devnode services...'",
        "devbox services up --process-compose-file ./process-compose-devnode.yaml"
      ],
      "02_stop_devnode": [
        "echo 'Stop L1X devnode services...'",
        "devbox services stop --all-projects",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE down l1x-node",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE down cassandra2",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE down cassandra1",
        "echo 'Stop L1X devnode services... Done!!!'"
      ],
      "11_clean_logs": [
        "rm -Rf ./devbox-services.log",
        "rm -Rf $L1X_CFG_TRACES/*.*",
        "rm -Rf $L1X_CFG_CLI_SCRIPTS/l1x-forge-cli/*.*"
      ],
      "11_clean_objs": [
        "echo Cleaning the workspace artifacts ...",
        "cargo clean",
        "rm -Rf $L1X_CFG_ARTIFACTS/*.*"
      ],
      "20_01_compile_evm_erc20": [
        "echo '**** üî® Compiling erc20 Contracts for L1X EVM üî® ****'",
        "devbox run 20_compile_evm_cmd ./deploy/deploy.ts creationCode20.txt",
        "echo 'üî® **************************************************************** üî®'"
      ],
      "20_02_compile_evm_erc201": [
        "echo '**** üî® Compiling erc201 Contracts for L1X EVM üî® ****'",
        "## devbox run 20_compile_evm_cmd ./deploy/deploy.ts creationCode202.txt",
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2/pkg/pool-stable",
        "cp ./creationCode/creationCode202.txt $L1X_CFG_EVM_ARTIFACTS/.",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_03_compile_evm_weth": [
        "echo '**** üî® Compiling weth Contracts for L1X EVM üî® ****'",
        "## devbox run 20_compile_evm_cmd ./deploy/deploy.ts creationWeth.txt",
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2/pkg/pool-stable",
        "cp ./creationCode/creationWeth.txt $L1X_CFG_EVM_ARTIFACTS/.",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_04_compile_evm_rateprovider": [
        "echo '**** üî® Compiling rateProvider Contracts for L1X EVM üî® ****'",
        "## devbox run 20_compile_evm_cmd ./deploy/deploy.ts creationRateProvider.txt",
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2/pkg/pool-stable",
        "cp ./creationCode/creationRateProvider.txt $L1X_CFG_EVM_ARTIFACTS/.",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_05_compile_evm_rateProvider1": [
        "echo '**** üî® Compiling rateProvider1 Contracts for L1X EVM üî® ****'",
        "echo Compiling rateProvider1 Contracts for L1X EVM...",
        "## devbox run 20_compile_evm_cmd ./deploy/deploy.ts creationRateProvider2.txt",
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2/pkg/pool-stable",
        "cp ./creationCode/creationRateProvider2.txt $L1X_CFG_EVM_ARTIFACTS/.",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_06_compile_evm_authorizer": [
        "echo Compiling authorizer Contracts for L1X EVM...",
        "devbox run 20_compile_evm_cmd ./deploy/deployAuth.ts creationAuthorizer.txt"
      ],
      "20_07_compile_evm_vault": [
        "echo '**** üî® Compiling vault Contracts for L1X EVM üî® ****'",
        "devbox run 20_compile_evm_cmd ./deploy/deployVault.ts creationVault.txt",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_08_compile_evm_protocolfee": [
        "echo '**** üî® Compiling protocol fee Contracts for L1X EVM üî® ****'",
        "devbox run 20_compile_evm_cmd ./deploy/deployProtocolFeeProvider.ts creationProtocolFee.txt",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_09_compile_evm_pool": [
        "echo '**** üî® Compiling pool Contracts for L1X EVM üî® ****'",
        "devbox run 20_compile_evm_cmd ./deploy/deployPool.ts creationCodePool.txt",
        "echo 'üî® **************************************************************** üî® '"
      ],
      "20_compile_evm_cmd": [
        "echo '**** üîß EVM Build Cmd Args üîß ****'",
        "echo $1, $2",
        "cd $L1X_CFG_WS_HOME/l1x-eth-contracts/Balancer-v2/pkg/pool-stable",
        "npx hardhat run $1 --network localhost",
        "cp ./creationCode/$2 $L1X_CFG_EVM_ARTIFACTS/.",
        "echo 'üîß **************************************************************** üîß'"
      ],
      "42_deploy_cli_evm_bpool": [
        "echo Deploying Bpool to L1X EVM",
        "devbox run 42_deploy_cli_evm_cmd 040-01-deploy-evm-creationCode20.json"
      ],
      "42_deploy_cli_evm_cmd": [
        "echo ==== Deploying $1 to L1X EVM ====",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE run --rm -e INTF_ARG_OWNER=super -e INTF_ARG_PAYLOAD=$1 l1x-tools-intf-sub-sol",
        "echo ==== Deploying $1 to L1X EVM Done ===="
      ],
      "42_init_cli_evm_bpool": [
        "echo Deploying Bpool to L1X EVM",
        "devbox run 42_init_cli_evm_cmd 040-02-init-evm-creationCode20.json"
      ],
      "42_init_cli_evm_cmd": [
        "echo Deploying Contract $1",
        "$L1X_CFG_DC_CMD_INTF -f $L1X_CFG_DC_FILE run --rm -e INTF_ARG_OWNER=super -e INTF_ARG_PAYLOAD=$1 l1x-tools-intf-sub-txn"
      ],
      "43_01_test_cli_evm_getpoolid": [
        "echo Test get Pool ID",
        "devbox run 42_init_cli_evm_cmd 043-01-test-evm-pool-getpoolid.json"
      ],
      "43_02_gettokenlist_calldata": [
        "echo Test get Pool ID",
        "cd ./l1x-eth-contracts/Balancer-v2/pkg/pool-stable && npx hardhat run ./deploy/tokenList.ts --network localhost"
      ],
      "43_03_test_cli_evm_gettokenlist": [
        "echo Test get Pool ID",
        "devbox run 42_init_cli_evm_cmd 043-02-test-evm-pool-gettokenlist.json"
      ],
      "43_04_approve_tokens_calldata": [
        "echo Test get Pool ID",
        "cd ./l1x-eth-contracts/Balancer-v2/pkg/pool-stable && npx hardhat run ./deploy/approve.ts --network localhost"
      ],
      "43_05_test_cli_evm_approve_tokens": [
        "echo Test get Pool ID",
        "devbox run 42_init_cli_evm_cmd 043-03-test-evm-approve-erc20.json",
        "devbox run 42_init_cli_evm_cmd 043-04-test-evm-approve-erc201.json"
      ],
      "43_06_init_pool_calldata": [
        "echo Test get Pool ID",
        "cd ./l1x-eth-contracts/Balancer-v2/pkg/pool-stable && npx hardhat run ./deploy/initPool.ts --network localhost"
      ],
      "43_07_test_cli_evm_init_pool": [
        "echo Test get Pool ID",
        "devbox run 42_init_cli_evm_cmd 043-05-test-evm-init-pool.json"
      ],
      "43_08_join_pool_calldata": [
        "echo Test get Pool ID",
        "cd ./l1x-eth-contracts/Balancer-v2/pkg/pool-stable && npx hardhat run ./deploy/joinPool.ts --network localhost"
      ],
      "43_09_test_cli_evm_join_pool": [
        "echo Test get Pool ID",
        "devbox run 42_init_cli_evm_cmd 043-06-test-evm-join-pool.json"
      ],
      "62_install_forge_evm_cmd_force_deploy": [
        "echo evm contract deploy and Init - Args",
        "echo :: $1, $2, $3, $4",
        "RUST_LOG=info l1x-forge vm-install-contract --vm-type evm --force --artifact-id $1 --contract-id $2 --owner $3 --salt $4"
      ],
      "63_install_forge_evm_cmd_reuse_deploy": [
        "echo evm contract Init - Args ::",
        "echo    - $1, $2, $3",
        "RUST_LOG=info l1x-forge vm-install-contract --vm-type evm --artifact-id $1 --contract-id $2 --owner $3"
      ],
      "81_01_install_forge_evm_erc20": [
        "echo '**** üì¶ Installing erc20 Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationCode20.txt erc20 super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_02_install_forge_evm_erc201": [
        "echo '**** üì¶ Installing erc201 Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationCode202.txt erc201 super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_03_install_forge_evm_weth": [
        "echo '**** üì¶ Installing weth Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationWeth.txt weth super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_04_install_forge_evm_rateprovider": [
        "echo '**** üì¶ Installing rateprovider Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationRateProvider.txt rateprovider super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_05_install_forge_evm_rateprovider1": [
        "echo '**** üì¶ Installing rateprovider1 Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationRateProvider2.txt rateprovider1 super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_06_install_forge_evm_authorizer": [
        "echo '**** üì¶ Installing authorizer Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationAuthorizer.txt authorizer super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_07_install_forge_evm_vault": [
        "echo '**** üì¶ Installing vault Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationVault.txt vault super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_08_install_forge_evm_protocolfee": [
        "echo '**** üì¶ Installing protocolfee Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationProtocolFee.txt protocolfee super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "81_09_install_forge_evm_pool": [
        "echo '**** üì¶ Installing pool Contracts for L1X EVM üì¶  ****'",
        "RAND_INT=$(openssl rand --hex 4)",
        "echo RAND_INT :: $RAND_INT",
        "SALT=$(printf \"%030d\" \"0x$RAND_INT\")",
        "devbox run 62_install_forge_evm_cmd_force_deploy creationCodePool.txt pool super $SALT",
        "echo 'üì¶   **************************************************************** üì¶ '"
      ],
      "82_01_install_forge_evm_bpool": [
        "echo '**** üì¶ Installing bpool set01 contracts for L1X EVM üì¶****'",
        "devbox run 20_01_compile_evm_erc20",
        "devbox run 81_01_install_forge_evm_erc20",
        "erc20_address=$(l1x-conf/get_contract_address.sh l1x_evm creationCode20.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set erc20 $erc20_address",
        "echo üì£ Updated erc20 address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get erc20",
        "devbox run 20_02_compile_evm_erc201",
        "devbox run 81_02_install_forge_evm_erc201",
        "erc201_address=$(l1x-conf/get_contract_address.sh l1x_evm creationCode202.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set erc201 $erc201_address",
        "echo üì£ Updated erc201 address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get erc201",
        "devbox run 20_03_compile_evm_weth",
        "devbox run 81_03_install_forge_evm_weth",
        "weth_address=$(l1x-conf/get_contract_address.sh l1x_evm creationWeth.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set weth $weth_address",
        "echo üì£ Updated weth address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get weth",
        "devbox run 20_04_compile_evm_rateprovider",
        "devbox run 81_04_install_forge_evm_rateprovider",
        "rateProvider_address=$(l1x-conf/get_contract_address.sh l1x_evm creationRateProvider.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set rateProvider $rateProvider_address",
        "echo üì£ Updated rateProvider address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get rateProvider",
        "devbox run 20_05_compile_evm_rateProvider1",
        "devbox run 81_05_install_forge_evm_rateprovider1",
        "rateProvide1_address=$(l1x-conf/get_contract_address.sh l1x_evm creationRateProvider2.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set rateProvider1 $rateProvide1_address",
        "echo üì£ Updated rateProvider1 address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get rateProvider1",
        "devbox run 20_06_compile_evm_authorizer",
        "devbox run 81_06_install_forge_evm_authorizer",
        "authorizer_address=$(l1x-conf/get_contract_address.sh l1x_evm creationAuthorizer.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set authorizer $authorizer_address",
        "echo üì£ Updated authorizer address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get authorizer",
        "devbox run 20_07_compile_evm_vault",
        "devbox run 81_07_install_forge_evm_vault",
        "vault_address=$(l1x-conf/get_contract_address.sh l1x_evm creationVault.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set vault $vault_address",
        "echo üì£ Updated vault address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get vault",
        "devbox run 20_08_compile_evm_protocolfee",
        "devbox run 81_08_install_forge_evm_protocolfee",
        "protocolfee_address=$(l1x-conf/get_contract_address.sh l1x_evm creationProtocolFee.txt deploy_address)",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- set protocol $protocolfee_address",
        "echo üì£ Updated protocolfee address in input.json",
        "RUST_LOG=info cargo run -p l1x-bpool-conf -- get protocol",
        "devbox run 20_09_compile_evm_pool",
        "devbox run 81_09_install_forge_evm_pool",
        "echo Pool Address :: $(l1x-conf/get_contract_address.sh l1x_evm creationCodePool.txt deploy_address)",
        "echo 'üì¶ **************************************************************** üì¶'"
      ]
    }
  }
}
